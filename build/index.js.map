{"version":3,"sources":["index.js"],"names":["fs","require","AWS","extend","_extend","async","HttpsProxyAgent","Bluebird","retry","lodash","backoff","LAMBDA_RUNTIME","backoffOptions","initialDelay","maxDelay","maxBackoffRetries","nodeAwsLambda","prototype","deploy","codePackage","config","lambdaClient","deployLambdaFunction","functionArn","lambda","credentials","SharedIniFileCredentials","profile","process","env","HTTPS_PROXY","httpOptions","agent","Lambda","region","accessKeyId","secretAccessKey","console","log","snsClient","SNS","srcretAccessKey","cloudWatchLogsClient","CloudWatchLogs","params","FunctionName","functionName","Description","description","Handler","handler","Role","role","Timeout","timeout","MemorySize","memorySize","Runtime","runtime","getLambdaFunction","then","getResult","lambdaExists","createLambdaFunction","createFunctionResult","updateEventSource","updatePushSource","localAttachLoggingFunction","attachLogging","max_tries","interval","catch","err","error","JSON","stringify","existingFunctionArn","updateLambdaFunction","updateLambdaConfig","publishLambdaVersion","resolve","reject","getFunctionParams","getFunction","data","statusCode","Configuration","FunctionArn","zipFileContents","readFileSync","localParams","Code","ZipFile","createFunction","updateFunctionParams","Publish","updateFunctionCode","updateFunctionConfiguration","eventSource","getEventSourceMappingsParams","EventSourceArn","listEventSourceMappings","EventSourceMappings","length","createEventSourceMapping","mappingError","eachSeries","mapping","iteratorCallback","updateEventSourceMappingParams","UUID","BatchSize","updateEventSourceMapping","updateMappingError","pushSource","each","currentTopic","currentIndex","currentTopicNameArn","TopicArn","currentTopicStatementId","StatementId","topicName","split","pop","createTopicIfNotExists","subscribeLambdaToTopic","listTopicParams","listTopics","foundTopic","find","Topics","o","isUndefined","createParams","Name","createTopic","createTopicError","subParams","Protocol","Endpoint","subscribe","removePermissionParams","removePermission","removePermissionError","StatusCode","permissionParams","Action","Principal","SourceArn","addPermission","addPermissionError","addPermissionResult","publishVersion","listVersionsByFunction","listVersionsResult","versionsToDelete","last","Versions","Version","index","version","push","deleteLambdaFunctionVersion","all","publishVersionParams","listVersionsParams","listErr","deleteFunctionParams","Qualifier","deleteFunction","logging","Promise","addLoggingLambdaPermissionToLambda","updateCloudWatchLogsSubscription","parsedStatusCode","get","StopError","LambdaFunctionName","message","match","stack","cloudWatchParams","destinationArn","Arn","filterName","filterPattern","logGroupName","putSubscriptionFilter","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const fs = require('fs');\nconst AWS = require('aws-sdk');\nconst extend = require('util')._extend; //eslint-disable-line no-underscore-dangle\nconst async = require('async');\nconst HttpsProxyAgent = require('https-proxy-agent');\nconst Bluebird = require('bluebird');\nconst retry = require('bluebird-retry');\nconst lodash = require('lodash');\nconst backoff = require('backoff');\n\nconst LAMBDA_RUNTIME = 'nodejs4.3';\nconst backoffOptions = {\n  initialDelay: 1000,\n  maxDelay: 60000\n};\nconst maxBackoffRetries = 7;\n\nconst nodeAwsLambda = () => {\n  return this;\n};\n\nnodeAwsLambda.prototype.deploy = (codePackage, config, lambdaClient) => {\n  return deployLambdaFunction(codePackage, config, lambdaClient);\n};\n\n// /**\n//  * deploys a lambda, creates a rule, and then binds the lambda to the rule by creating a target\n//  * @param {file} codePackage a zip of the collection\n//  * @param {object} config note: should include the rule property that is an object of: {name, scheduleExpression, isEnabled, role, targetInput} scheduleExpression is a duration, you can write it like so: 'cron(0 20 * * ? *)', 'rate(5 minutes)'. Note if using rate, you can also have seconds, minutes, hours. isEnabled true or false\n//  * @param lambdaClient\n//  *\n//  */\n// function deployScheduleLambda(codePackage, config, lambdaClient) {\n//   let functionArn = '';\n//\n//   return deployLambdaFunction(codePackage, config, lambdaClient)\n//       .then(result => {\n//         functionArn = result.functionArn;\n//\n//         if (!config.hasOwnProperty('rule') &&\n//             (!config.rule.hasOwnProperty('name') ||\n//              !config.rule.hasOwnProperty('scheduleExpression') ||\n//              !config.rule.hasOwnProperty('isEnabled') ||\n//              !config.rule.hasOwnProperty('role'))){\n//           throw new Error('rule is required. Please include a property called rule that is an object which has the following: {name, scheduleExpression, isEnabled, role}');\n//         }\n//\n//        return createCloudWatchEventRuleFunction(config.rule);\n//       }).then(eventResult => {\n//         let targetInput = config.rule.targetInput ? JSON.stringify(config.rule.targetInput) : null;\n//         return createCloudWatchTargetsFunction({Rule: config.rule.name, Targets: [{Id: `${config.functionName}-${config.rule.name}`, Arn: functionArn, Input: targetInput}]})\n//       }).catch((err) => {\n//         console.error(`Error: ${JSON.stringify(err)}`);\n//         throw err;\n//       });\n// }\n//\n// /**\n//  * creates a rule\n//  * @param {object} config should include the rule property that is an object of: {name, scheduleExpression, isEnabled, role, targetInput} scheduleExpression is a duration, you can write it like so: 'cron(0 20 * * ? *)', 'rate(5 minutes)'. Note if using rate, you can also have seconds, minutes, hours. isEnabled true or false\n//  */\n// function createCloudWatchEventRule(config){\n//   return createCloudWatchEventRuleFunction(config)\n//       .catch((err) => {\n//         console.error(`Error: ${JSON.stringify(err)}`);\n//         throw err;\n//       });\n// }\n//\n// /**\n//  * sets up a target, which creates the binding of a arn to a cloud watch event rule\n//  * @param {object} config {Rule, Targets} Rule is string (name of the rule, Targets is an array of {Arn *required*, Id *required*, Input, InputPath}. Arn of source linked to target, Id is a unique name for the target, Input the json\n//  */\n// function createCloudWatchTargets(config){\n//   return createCloudWatchTargetsFunction(config)\n//       .catch((err) => {\n//         console.error(`Error: ${JSON.stringify(err)}`);\n//         throw true;\n//       });\n// }\n\nconst deployLambdaFunction = (codePackage, config, lambdaClient) => {\n  let functionArn = '';\n  let lambda = lambdaClient;\n  if (!lambda) {\n    if ('profile' in config) {\n      AWS.config.credentials = new AWS.SharedIniFileCredentials({profile: config.profile});\n    }\n\n    if (process.env.HTTPS_PROXY) {\n      if (!AWS.config.httpOptions) {\n        AWS.config.httpOptions = {};\n      }\n\n      AWS.config.httpOptions.agent = new HttpsProxyAgent(process.env.HTTPS_PROXY);\n    }\n\n    lambda = new AWS.Lambda({\n      region: 'region' in config ? config.region : 'us-east-1',\n      accessKeyId: 'accessKeyId' in config ? config.accessKeyId : '',\n      secretAccessKey: 'secretAccessKey' in config ? config.secretAccessKey : ''\n    });\n\n    console.log(`Access Key Id From Deployer: ${config.accessKeyId}`);\n  }\n\n  const snsClient = new AWS.SNS({\n    region: 'region' in config ? config.region : 'us-east-1',\n    accessKeyId: 'accessKeyId' in config ? config.accessKeyId : '',\n    secretAccessKey: 'secretAccessKey' in config ? config.srcretAccessKey : ''\n  });\n\n  const cloudWatchLogsClient = new AWS.CloudWatchLogs({\n    region: 'region' in config ? config.region : 'us-east-1',\n    accessKeyId: 'accessKeyId' in config ? config.accessKeyId : '',\n    secretAccessKey: 'secretAccessKey' in config ? config.secretAccessKey : ''\n  });\n\n  const params = {\n    FunctionName: config.functionName,\n    Description: config.description,\n    Handler: config.handler,\n    Role: config.role || 'arn:aws:iam::677310820158:role/lambda_basic_execution',\n    Timeout: config.timeout || 10,\n    MemorySize: config.memorySize || 128,\n    Runtime: config.runtime || LAMBDA_RUNTIME\n  };\n\n  return getLambdaFunction(lambda, params.FunctionName)\n    .then((getResult) => {\n      if (!getResult.lambdaExists) {\n        return createLambdaFunction(lambda, codePackage, params)\n          .then((createFunctionResult) => {\n            functionArn = createFunctionResult.functionArn;\n          })\n          .then(() => updateEventSource(lambda, config))\n          .then(() => updatePushSource(lambda, snsClient, config, functionArn))\n          .then(() => {\n            const localAttachLoggingFunction = () => {\n              return attachLogging(lambda, cloudWatchLogsClient, config, params);\n            };\n            return retry(localAttachLoggingFunction, {max_tries: 3, interval: 1000, backoff: 500});\n          })\n          .catch((err) => {\n            console.error(`Error in createLambdaFunction(): ${JSON.stringify(err)}`);\n            throw err;\n          });\n      }\n      const existingFunctionArn = getResult.functionArn;\n      return updateLambdaFunction(lambda, codePackage, params)\n        .then(() => updateLambdaConfig(lambda, params))\n        .then(() => updateEventSource(lambda, config))\n        .then(() => updatePushSource(lambda, snsClient, config, existingFunctionArn))\n        .then(() => publishLambdaVersion(lambda, config))\n        .then(() => {\n          const localAttachLoggingFunction = () => {\n            return attachLogging(lambda, cloudWatchLogsClient, config, params);\n          };\n          return retry(localAttachLoggingFunction, {max_tries: 3, interval: 1000, backoff: 500});\n        })\n        .catch((err) => {\n          console.error(`Error in updateLambdaFunction(): ${JSON.stringify(err)}`);\n          throw err;\n        });\n    })\n    .catch((err) => {\n      console.error(`Error in getLambdaFunction(): ${JSON.stringify(err)}`);\n      throw err;\n    });\n};\n\n// /**\n//  * Creates or Updates rules, this means you can disable or enable the state of this\n//  * @param {object} config {name, scheduleExpression, isEnabled, role} scheduleExpression is a duration, you can write it like so: 'cron(0 20 * * ? *)', 'rate(5 minutes)'. Note if using rate, you can also have seconds, minutes, hours. isEnabled true or false\n//  * @returns {Promise<object>|Promise<Error>}\n//  * @private\n//  */\n// const createCloudWatchEventRuleFunction = function (config) {\n//   /* params\n//    {Name: 'STRING_VALUE', // required!//\n//     Description: 'STRING_VALUE',\n//     EventPattern: 'STRING_VALUE',\n//     RoleArn: 'STRING_VALUE',\n//     ScheduleExpression: 'STRING_VALUE',\n//     State: 'ENABLED | DISABLED' }\n//   */\n//\n//   const params = {\n//     Name: config.name,\n//     ScheduleExpression: config.scheduleExpression,\n//     Role: config.role || 'arn:aws:iam::677310820158:role/lambda_basic_execution',\n//     State: config.isEnabled ? 'ENABLED' : 'DISABLED'\n//   };\n//\n//   const cloudWatchEvents = new AWS.CloudWatchEvents({\n//     region: 'region' in config ? config.region : 'us-east-1',\n//     accessKeyId: 'accessKeyId' in config ? config.accessKeyId : '',\n//     secretAccessKey: 'secretAccessKey' in config ? config.secretAccessKey : ''\n//   });\n//\n//   return new Bluebird((resolve, reject) => {\n//     cloudWatchEvents.putRule(params, function (err, data) {\n//       if (err) {\n//         return reject(err);\n//       }\n//\n//       return resolve(data);\n//     });\n//   });\n// };\n//\n// const createCloudWatchTargetsFunction = function (config) {\n//   const cloudWatchEvents = new AWS.CloudWatchEvents({\n//     region: 'region' in config ? config.region : 'us-east-1',\n//     accessKeyId: 'accessKeyId' in config ? config.accessKeyId : '',\n//     secretAccessKey: 'secretAccessKey' in config ? config.secretAccessKey : ''\n//   });\n//\n//   //targets[{Id, Arn, Input}] Input is the JSON text sent to target\n//   return new Bluebird((resolve, reject) => {\n//     cloudWatchEvents.putTargets(params, function (err, data) {\n//       if (err) {\n//         return reject(err);\n//       }\n//\n//       return resolve(data);\n//     });\n//   });\n// };\n//\n// /**\n//  *\n//  * @param lambdaClient\n//  * @param functionName\n//  * @returns {bluebird|exports|module.exports}\n//  * Resolved Object:\n//  * lambdaExists - boolean flag that is true if lambda exists\n//  * functionArn - this is a string that contains arn to the lambda function\n//  * @private\n//  */\nconst getLambdaFunction = (lambdaClient, functionName) => {\n  return new Bluebird((resolve, reject) => {\n    const getFunctionParams = {\n      FunctionName: functionName\n    };\n\n    lambdaClient.getFunction(getFunctionParams, (err, data) => {\n      if (err && err.statusCode !== 404) {\n        console.log(`AWS API request failed. Check your AWS credentials and permissions. [Error: ${JSON.stringify(err)}]`);\n        reject(err);\n      }\n      else if (err && err.statusCode === 404) {\n        console.log(`Lambda not found. [LambdaName: ${functionName}]`);\n        resolve({lambdaExists: false});\n      }\n      else {\n        console.log(`Lambda found! [LambdaName: ${functionName}]`);\n        resolve({\n          lambdaExists: true,\n          functionArn: data.Configuration.FunctionArn\n        });\n      }\n    });\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param codePackage\n * @param params\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nconst createLambdaFunction = (lambdaClient, codePackage, params) => {\n  return new Bluebird((resolve, reject) => {\n    console.log(`Creating LambdaFunction. [FunctionName: ${params.FunctionName}]`);\n    const zipFileContents = fs.readFileSync(codePackage);\n    const localParams = params;\n    localParams.Code = {ZipFile: zipFileContents};\n    lambdaClient.createFunction(localParams, (err, data) => {\n      if (err) {\n        console.error(`Create function failed. Check your iam:PassRole permissions. [Error: ${JSON.stringify(err)}]`);\n        reject(err);\n      }\n      else {\n        console.log(`Created Lambda successfully. [Data: ${JSON.stringify(data)}]`);\n        resolve({functionArn: data.FunctionArn});\n      }\n    });\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param codePackage\n * @param params\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nconst updateLambdaFunction = (lambdaClient, codePackage, params) => {\n  return new Bluebird((resolve, reject) => {\n    console.log(`Updating LambdaFunction. [FunctionName: ${params.FunctionName}]`);\n    const zipFileContents = fs.readFileSync(codePackage);\n\n    const updateFunctionParams = {\n      FunctionName: params.FunctionName,\n      ZipFile: zipFileContents,\n      Publish: false\n    };\n\n    // const callUpdateFunctionCode = backoff.call(lambdaClient.updateFunctionCode, updateFunctionParams, (updateFunctionCodeErr) => {\n    //   console.log(`Number of callUpdateFunctionCode retries: ${callUpdateFunctionCode.getNumRetries()}`);\n    //\n    //   if (updateFunctionCodeErr) {\n    //     console.error(`UpdateFunction Error: ${JSON.stringify(updateFunctionCodeErr)}`);\n    //     reject(updateFunctionCodeErr);\n    //   }\n    //   else {\n    //     const callUpdateFunctionConfiguration = backoff.call(lambdaClient.updateFunctionConfiguration, params, (updateConfigErr, data) => {\n    //       console.log(`Number of callUpdateFunctionConfiguration retries: ${callUpdateFunctionConfiguration.getNumRetries()}`);\n    //       if (updateConfigErr) {\n    //         console.error(`UpdateFunctionConfiguration Error: ${JSON.stringify(updateConfigErr)}`);\n    //         reject(updateConfigErr);\n    //       }\n    //       else {\n    //         console.log(`Successfully updated lambda. [FunctionName: ${params.FunctionName}] [Data: ${JSON.stringify(data)}]`);\n    //         resolve();\n    //       }\n    //     });\n    //     callUpdateFunctionConfiguration.retryIf(updateConfigErr => {\n    //       return updateConfigErr.code === 'TooManyRequestsException';\n    //     });\n    //     callUpdateFunctionConfiguration.failAfter(maxBackoffRetries);\n    //     callUpdateFunctionConfiguration.setStrategy(new backoff.ExponentialStrategy(backoffOptions));\n    //     callUpdateFunctionConfiguration.start();\n    //   }\n    // });\n    // console.log('setting retryIf');\n    // callUpdateFunctionCode.retryIf(updateFunctionCodeErr => {\n    //   return updateFunctionCodeErr.code === 'TooManyRequestsException';\n    // });\n    // console.log('setting failAfter');\n    // callUpdateFunctionCode.failAfter(maxBackoffRetries);\n    // console.log('setting strategy');\n    // callUpdateFunctionCode.setStrategy(new backoff.ExponentialStrategy(backoffOptions));\n    // console.log('starting call with backoff');\n    // callUpdateFunctionCode.start();\n    // console.log('call started');\n\n    lambdaClient.updateFunctionCode(updateFunctionParams, (err, data) => {\n      if (err) {\n        console.error(`UpdateFunction Error: ${JSON.stringify(err)}`);\n        reject(err);\n      }\n      else {\n        console.log(`Successfully update lambda function code [FunctionName: ${params.FunctionName}] [Data: ${JSON.stringify(data, null, 2)}]`);\n        resolve();\n      }\n      // else {\n      //   lambdaClient.updateFunctionConfiguration(params, (updateError, data) => {\n      //     if (updateError) {\n      //       console.error(`UpdateFunctionConfiguration Error: ${JSON.stringify(updateError)}`);\n      //       // {\"message\":\"Rate exceeded\",\"code\":\"TooManyRequestsException\",\"time\":\"2016-10-12T19:00:52.426Z\",\"requestId\":\"3279a1fc-90ae-11e6-8bfc-5b34443513a7\",\"statusCode\":429,\"retryable\":false,\"retryDelay\":26.07559027784916}\n      //       reject(updateError);\n      //     }\n      //     else {\n      //       console.log(`Successfully updated lambda. [FunctionName: ${params.FunctionName}] [Data: ${JSON.stringify(data)}]`);\n      //       resolve();\n      //     }\n      //   });\n      // }\n    });\n  });\n};\n\nconst updateLambdaConfig = (lambdaClient, params) => {\n  return Bluebird((resolve, reject) => {\n    lambdaClient.updateFunctionConfiguration(params, (err, data) => {\n      if (err) {\n        console.error(`UpdateFunctionConfiguration Error: ${JSON.stringify(err)}`);\n        reject(err);\n      }\n      else {\n        console.log(`Successfully updated lambda config [FunctionName: ${params.FunctionName}] [Data: ${JSON.stringify(data, null, 2)}]`);\n        resolve();\n      }\n    })\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param config\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nconst updateEventSource = (lambdaClient, config) => {\n  return new Bluebird((resolve, reject) => {\n    if (!config.eventSource) {\n      resolve();\n      return;\n    }\n\n    const localParams = extend({\n      FunctionName: config.functionName\n    }, config.eventSource);\n\n    const getEventSourceMappingsParams = {\n      FunctionName: localParams.FunctionName,\n      EventSourceArn: localParams.EventSourceArn\n    };\n\n    lambdaClient.listEventSourceMappings(getEventSourceMappingsParams, (err, data) => {\n      if (err) {\n        console.error('List event source mapping failed, please make sure you have permission');\n        console.error(`error: ${err}`);\n        reject(err);\n      }\n      else if (data.EventSourceMappings.length === 0) {\n        lambdaClient.createEventSourceMapping(localParams, (mappingError) => {\n          if (mappingError) {\n            console.error(`Failed to create event source mapping! Error: ${mappingError}`);\n            reject(mappingError);\n          }\n          else {\n            resolve();\n          }\n        });\n      }\n      else {\n        async.eachSeries(data.EventSourceMappings, (mapping, iteratorCallback) => {\n          const updateEventSourceMappingParams = {\n            UUID: mapping.UUID,\n            BatchSize: localParams.BatchSize\n          };\n          lambdaClient.updateEventSourceMapping(updateEventSourceMappingParams, iteratorCallback);\n        }, (updateMappingError) => {\n          if (updateMappingError) {\n            console.error(`Update event source mapping failed. ${updateMappingError}`);\n            reject(updateMappingError);\n          }\n          else {\n            resolve();\n          }\n        });\n      }\n    });\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param snsClient\n * @param config\n * @param functionArn\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nconst updatePushSource = (lambdaClient, snsClient, config, functionArn) => {\n  if (!config.pushSource) {\n    return Bluebird.resolve(true);\n  }\n\n  return Bluebird.each(config.pushSource, (currentTopic, currentIndex, length) => {\n    console.log(`Executing Topic ${currentIndex} of ${length}`);\n    console.log(`Current Topic: ${JSON.stringify(currentTopic)}`);\n    const currentTopicNameArn = currentTopic.TopicArn;\n    const currentTopicStatementId = currentTopic.StatementId;\n    const topicName = currentTopic.TopicArn.split(':').pop();\n\n    return createTopicIfNotExists(snsClient, topicName)\n      .then(() => subscribeLambdaToTopic(lambdaClient, snsClient, config, functionArn, topicName, currentTopicNameArn, currentTopicStatementId))\n      .catch((err) => {\n        console.error(`Error creating topic: ${JSON.stringify(err)}`);\n        throw err;\n      });\n  });\n};\n\n/**\n *\n * @param snsClient\n * @param topicName\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nconst createTopicIfNotExists = (snsClient, topicName) => {\n  return new Bluebird((resolve, reject) => {\n    const listTopicParams = {};\n\n    snsClient.listTopics(listTopicParams, (err, data) => {\n      if (err) {\n        console.error(`Failed to list to topic. Error: ${JSON.stringify(err)}`);\n        reject(err);\n      }\n      else {\n        const foundTopic = lodash.find(data.Topics, (o) => o.TopicArn === topicName);\n        if (!lodash.isUndefined(foundTopic)) {\n          resolve();\n        }\n        else {\n          const createParams = {\n            Name: topicName\n          };\n\n          snsClient.createTopic(createParams, (createTopicError) => {\n            if (createTopicError) {\n              console.error(`Failed to create to topic. Error ${JSON.stringify(createTopicError)}`);\n              reject(createTopicError);\n            }\n            else {\n              resolve();\n            }\n          });\n        }\n      }\n    });\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param snsClient\n * @param config\n * @param functionArn\n * @param topicName\n * @param currentTopicNameArn\n * @param currentTopicStatementId\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nconst subscribeLambdaToTopic = (lambdaClient, snsClient, config, functionArn, topicName, currentTopicNameArn, currentTopicStatementId) => {\n  return new Bluebird((resolve, reject) => {\n    const subParams = {\n      Protocol: 'lambda',\n      Endpoint: functionArn,\n      TopicArn: currentTopicNameArn\n    };\n\n    snsClient.subscribe(subParams, (err) => {\n      if (err) {\n        console.error(`Failed to subscribe to topic. [Topic Name: ${topicName}] [TopicArn: ${subParams.TopicArn}] [Error: ${JSON.stringify(err)}]`);\n        reject(err);\n      }\n      else {\n        const removePermissionParams = {\n          FunctionName: config.functionName,\n          StatementId: currentTopicStatementId\n        };\n        lambdaClient.removePermission(removePermissionParams, (removePermissionError, data) => {\n          if (removePermissionError && removePermissionError.StatusCode === 404) {\n            console.error(`Permission does not exist. [Error: ${JSON.stringify(removePermissionError)}]`);\n          }\n          else if (removePermissionError && removePermissionError.statusCode !== 404) {\n            console.error(`Unable to delete permission. [Error: ${JSON.stringify(removePermissionError)}]`);\n          }\n          else {\n            console.log(`Permission deleted successfully! [Data: ${JSON.stringify(data)}]`);\n          }\n\n          const permissionParams = {\n            FunctionName: config.functionName,\n            Action: 'lambda:InvokeFunction',\n            Principal: 'sns.amazonaws.com',\n            StatementId: currentTopicStatementId,\n            SourceArn: currentTopicNameArn\n          };\n          lambdaClient.addPermission(permissionParams, (addPermissionError, addPermissionResult) => {\n            if (addPermissionError) {\n              console.error(`Failed to add permission. [Error: ${JSON.stringify(addPermissionError)}]`);\n              reject(addPermissionError);\n            }\n            else {\n              console.log(`Succeeded in adding permission. [Data: ${JSON.stringify(addPermissionResult)}]`);\n              resolve();\n            }\n          });\n        });\n      }\n    });\n  });\n};\n\nconst publishLambdaVersion = (lambdaClient, config) => {\n  return publishVersion(lambdaClient, config)\n    .then(() => listVersionsByFunction(lambdaClient, config))\n    .then((listVersionsResult) => {\n      const versionsToDelete = [];\n      const last = listVersionsResult.Versions[listVersionsResult.Versions.length - 1].Version;\n      for (let index = 0; index < listVersionsResult.Versions.length; ++index) {\n        const version = listVersionsResult.Versions[index].Version;\n        if (version !== '$LATEST' && version !== last) {\n          versionsToDelete.push(deleteLambdaFunctionVersion(lambdaClient, config, version));\n        }\n      }\n      return Bluebird.all(versionsToDelete);\n    });\n};\n\nconst publishVersion = (lambdaClient, config) => {\n  return new Bluebird((resolve, reject) => {\n    const publishVersionParams = {FunctionName: config.functionName};\n\n    lambdaClient.publishVersion(publishVersionParams, (err, data) => {\n      if (err) {\n        console.error(`Error Publishing Version. [Error: ${JSON.stringify(err)}]`);\n        reject(err);\n      }\n      else {\n        console.log(`Successfully published version. [Data: ${JSON.stringify(data)}]`);\n        resolve(data);\n      }\n    });\n  });\n};\n\nconst listVersionsByFunction = (lambdaClient, config) => {\n  return new Bluebird((resolve, reject) => {\n    const listVersionsParams = {FunctionName: config.functionName};\n    lambdaClient.listVersionsByFunction(listVersionsParams, (listErr, data) => {\n      if (listErr) {\n        console.error(`Error Listing Versions for Lambda Function. [Error: ${JSON.stringify(listErr)}]`);\n        reject(listErr);\n      }\n      else {\n        resolve(data);\n      }\n    });\n  });\n};\n\nconst deleteLambdaFunctionVersion = (lambdaClient, config, version) => {\n  return new Bluebird((resolve) => {\n    const deleteFunctionParams = {\n      FunctionName: config.functionName,\n      Qualifier: version\n    };\n\n    lambdaClient.deleteFunction(deleteFunctionParams, (err) => {\n      if (err) {\n        console.error(`Failed to delete lambda version. [FunctionName: ${config.functionName}] [Version: ${version}]`);\n      }\n      else {\n        console.log(`Successfully deleted lambda version. [FunctionName: ${config.functionName}] [Version: ${version}]`);\n      }\n      resolve();\n    });\n  });\n};\n\nconst attachLogging = (lambdaClient, cloudWatchLogsClient, config, params) => {\n  if (!config.logging) {\n    return Promise.resolve('no logging to attach');\n  }\n  return addLoggingLambdaPermissionToLambda(lambdaClient, config)\n    .then(() => updateCloudWatchLogsSubscription(cloudWatchLogsClient, config, params))\n    .catch(err => {\n      const parsedStatusCode = lodash.get(err, 'statusCode', '');\n      console.error(`Error occurred in _attachLogging. [StatusCode: ${parsedStatusCode}]`);\n      if (parsedStatusCode !== 429 && err.statusCode !== '429') {\n        console.error(`Received a non-retry throttle error`);\n        throw new retry.StopError(`Recieved non-retry throttle error.  [Error: ${JSON.stringify(err)}]`);\n      }\n    });\n};\n\nconst addLoggingLambdaPermissionToLambda = (lambdaClient, config) => {\n  return new Bluebird((resolve, reject) => {\n    // Need to add the permission once, but if it fails the second time no worries.\n    const permissionParams = {\n      Action: 'lambda:InvokeFunction',\n      FunctionName: config.logging.LambdaFunctionName,\n      Principal: config.logging.Principal,\n      StatementId: `${config.logging.LambdaFunctionName}LoggingId`\n    };\n    lambdaClient.addPermission(permissionParams, (err, data) => {\n      if (err) {\n        if (err.message.match(/The statement id \\(.*?\\) provided already exists. Please provide a new statement id, or remove the existing statement./i)) {\n          console.log(`Lambda function already contains loggingIndex [Function: ${permissionParams.FunctionName}] [Permission StatementId: ${permissionParams.StatementId}]`);\n          resolve();\n        }\n        else {\n          console.error(`Error Adding Logging Permission to Lambda. [Error: ${JSON.stringify(err)}]`, err.stack);\n          reject(err);\n        }\n      }\n      else {\n        console.log(JSON.stringify(data, null, 2));\n        resolve();\n      }\n    });\n  });\n};\n\nconst updateCloudWatchLogsSubscription = (cloudWatchLogsClient, config, params) => {\n  return new Bluebird((resolve, reject) => {\n    const cloudWatchParams = {\n      destinationArn: config.logging.Arn, /* required */\n      filterName: `LambdaStream_${params.FunctionName}`,\n      filterPattern: '',\n      logGroupName: `/aws/lambda/${params.FunctionName}`\n    };\n    console.log(`Function Name: ${params.FunctionName}`);\n    console.log(`Filter Name: ${cloudWatchParams.filterName}`);\n    console.log(`Log Group Name: ${cloudWatchParams.logGroupName}`);\n    cloudWatchLogsClient.putSubscriptionFilter(cloudWatchParams, (err, data) => {\n      if (err) {\n        if (err.message.match(/The specified log group does not exist./i)) {\n          //this error shouldn't stop the deploy since its due to the lambda having never been executed in order to create the log group in Cloud Watch Logs,\n          // so we are going to ignore this error\n          // ..we should recover from this by creating the log group or it will be resolved on next execution after the lambda has been run once\n          console.error(`Failed to add subscription filter to lambda due it log group not existing.  [LogGroupName: ${cloudWatchParams.logGroupName}][FilterName: ${cloudWatchParams.filterName}]`);\n          resolve();\n        }\n        else {\n          console.error(`Failed To Add Mapping For Logger. [Error: ${JSON.stringify(err)}]`);\n          reject(err);\n        }\n      }\n      else {\n        console.log(`Successfully added subscription Filter. [LogGroupName: ${cloudWatchParams.logGroupName}][FilterName: ${cloudWatchParams.filterName}] [Response: ${JSON.stringify(data)}]`);\n        resolve();\n      }\n    });\n  });\n};\n\nmodule.exports = nodeAwsLambda;\n"]}