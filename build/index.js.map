{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["let fs = require('fs');\nlet AWS = require('aws-sdk');\nlet extend = require('util')._extend;\nlet async = require('async');\nlet HttpsProxyAgent = require('https-proxy-agent');\nlet Bluebird = require('bluebird');\nlet retry = require('bluebird-retry');\nlet __ = require('lodash');\n\nconst LAMBDA_RUNTIME = 'nodejs4.3';\n\nexport function deployLambda(codePackage, config, logger, lambdaClient, callback) {\n  return _deployLambdaFunction(codePackage, config, logger, lambdaClient)\n    .asCallback(callback);\n}\n\n/**\n * deploys a lambda, creates a rule, and then binds the lambda to the rule by creating a target\n * @param {file} codePackage a zip of the collection\n * @param {object} config note: should include the rule property that is an object of: {name, scheduleExpression, isEnabled, role, targetInput} scheduleExpression is a duration, you can write it like so: 'cron(0 20 * * ? *)', 'rate(5 minutes)'. Note if using rate, you can also have seconds, minutes, hours. isEnabled true or false\n * @param logger\n * @param lambdaClient\n * @param {function} callback the arguments are error and data\n *\n */\nexport function deployScheduleLambda(codePackage, config, logger, lambdaClient, callback) {\n  let functionArn = '';\n\n  return _deployLambdaFunction(codePackage, config, logger, lambdaClient, callback)\n      .then(result => {\n        functionArn = result.functionArn;\n\n        if (!config.hasOwnProperty('rule') &&\n            (!config.rule.hasOwnProperty('name') ||\n             !config.rule.hasOwnProperty('scheduleExpression') ||\n             !config.rule.hasOwnProperty('isEnabled') ||\n             !config.rule.hasOwnProperty('role'))){\n          throw new Error('rule is required. Please include a property called rule that is an object which has the following: {name, scheduleExpression, isEnabled, role}');\n        }\n\n       return _createCloudWatchEventRuleFunction(config.rule);\n      }).then(eventResult => {\n        let targetInput = config.rule.targetInput ? JSON.stringify(config.rule.targetInput) : null;\n        return _createCloudWatchTargetsFunction({Rule: config.rule.name, Targets: [{Id: `${config.functionName}-${config.rule.name}`, Arn: functionArn, Input: targetInput}]})\n      }).catch((err) => {\n        logger(`Error: ${JSON.stringify(err)}`);\n        throw true;\n      }).asCallback(callback)\n}\n\n/**\n * creates a rule\n * @param {object} config should include the rule property that is an object of: {name, scheduleExpression, isEnabled, role, targetInput} scheduleExpression is a duration, you can write it like so: 'cron(0 20 * * ? *)', 'rate(5 minutes)'. Note if using rate, you can also have seconds, minutes, hours. isEnabled true or false\n * @param {function} callback\n */\nexport function createCloudWatchEventRule(config, callback){\n  return _createCloudWatchEventRuleFunction(config)\n      .catch((err) => {\n        logger(`Error: ${JSON.stringify(err)}`);\n        throw true;\n      }).asCallback(callback);\n}\n\n/**\n * sets up a target, which creates the binding of a arn to a cloud watch event rule\n * @param {object} config {Rule, Targets} Rule is string (name of the rule, Targets is an array of {Arn *required*, Id *required*, Input, InputPath}. Arn of source linked to target, Id is a unique name for the target, Input the json\n * @param {function} callback\n */\nexport function createCloudWatchTargets(config, callback){\n  return _createCloudWatchTargetsFunction(config)\n      .catch((err) => {\n        logger(`Error: ${JSON.stringify(err)}`);\n        throw true;\n      })\n      .asCallback(callback)\n}\n\nlet _deployLambdaFunction = function(codePackage, config, logger, lambdaClient){\n  let functionArn = '';\n  if (!logger) {\n    logger = console.log;\n  }\n  if (!lambdaClient) {\n    if (\"profile\" in config) {\n      AWS.config.credentials = new AWS.SharedIniFileCredentials({profile: config.profile});\n    }\n\n    if (process.env.HTTPS_PROXY) {\n      if (!AWS.config.httpOptions) {\n        AWS.config.httpOptions = {};\n      }\n\n      AWS.config.httpOptions.agent = new HttpsProxyAgent(process.env.HTTPS_PROXY);\n    }\n\n    lambdaClient = new AWS.Lambda({\n      region: config.region,\n      accessKeyId: \"accessKeyId\" in config ? config.accessKeyId : '',\n      secretAccessKey: \"secretAccessKey\" in config ? config.secretAccessKey : ''\n    });\n\n    logger(`Access Key Id From Deployer: ${config.accessKeyId}`);\n  }\n\n  let snsClient = new AWS.SNS({\n    region: config.region,\n    accessKeyId: 'accessKeyId' in config ? config.accessKeyId : '',\n    secretAccessKey: 'secretAccessKey' in config ? config.secretAccessKey : ''\n  });\n\n  let cloudWatchLogsClient = new AWS.CloudWatchLogs({\n    region: config.region,\n    accessKeyId: \"accessKeyId\" in config ? config.accessKeyId : \"\",\n    secretAccessKey: \"secretAccessKey\" in config ? config.secretAccessKey : \"\"\n  });\n\n  let params = {\n    FunctionName: config.functionName,\n    Description: config.description,\n    Handler: config.handler,\n    Role: config.role,\n    Timeout: config.timeout || 10,\n    MemorySize: config.memorySize || 128,\n    Runtime: config.runtime || LAMBDA_RUNTIME\n  };\n\n  return _getLambdaFunction(lambdaClient, logger, params.FunctionName)\n      .then((getResult) => {\n        if (!getResult.lambdaExists) {\n          return _createLambdaFunction(lambdaClient, logger, codePackage, params)\n              .then((createFunctionResult) => {\n                functionArn = createFunctionResult.functionArn;\n              })\n              .then(() => _updateEventSource(lambdaClient, config, logger))\n              .then(() => _updatePushSource(lambdaClient, snsClient, config, logger, functionArn))\n              .then(() => {\n                let localAttachLoggingFunction = () => {return _attachLogging(lambdaClient, cloudWatchLogsClient, logger, config, params)};\n                return retry(localAttachLoggingFunction, {max_tries: 3, interval: 1000, backoff: 500});\n              })\n              .catch((err) => {\n                logger(`Error: ${JSON.stringify(err)}`);\n                throw true;\n              });\n        }else {\n          let existingFunctionArn = getResult.functionArn;\n          return _updateLambdaFunction(lambdaClient, logger, codePackage, params)\n              .then(() => _updateEventSource(lambdaClient, config, logger))\n              .then(() => _updatePushSource(lambdaClient, snsClient, config, logger, existingFunctionArn))\n              .then(() => _publishLambdaVersion(lambdaClient, logger, config))\n              .then(() => {\n                let localAttachLoggingFunction = () => {return _attachLogging(lambdaClient, cloudWatchLogsClient, logger, config, params)};\n                return retry(localAttachLoggingFunction, {max_tries: 3, interval: 1000, backoff: 500});\n              })\n              .catch((err) => {\n                logger(`Error: ${JSON.stringify(err)}`);\n                throw true;\n              });\n        }\n      })\n      .catch((err) => {\n        logger(`Error: ${JSON.stringify(err)}`);\n        throw true;\n      });\n};\n\n/**\n * Creates or Updates rules, this means you can disable or enable the state of this\n * @param {object} config {name, scheduleExpression, isEnabled, role} scheduleExpression is a duration, you can write it like so: 'cron(0 20 * * ? *)', 'rate(5 minutes)'. Note if using rate, you can also have seconds, minutes, hours. isEnabled true or false\n * @returns {Promise<object>|Promise<Error>}\n * @private\n */\nlet _createCloudWatchEventRuleFunction = function (config) {\n  /* params\n   {Name: 'STRING_VALUE', // required!//\n    Description: 'STRING_VALUE',\n    EventPattern: 'STRING_VALUE',\n    RoleArn: 'STRING_VALUE',\n    ScheduleExpression: 'STRING_VALUE',\n    State: 'ENABLED | DISABLED' }\n  */\n\n  let params = {\n    Name: config.name,\n    ScheduleExpression: config.scheduleExpression,\n    RoleArn: config.role,\n    State: config.isEnabled ? 'ENABLED' : 'DISABLED'\n  };\n\n  let cloudWatchEvents = new AWS.CloudWatchEvents({\n    region: config.region,\n    accessKeyId: 'accessKeyId' in config ? config.accessKeyId : '',\n    secretAccessKey: 'secretAccessKey' in config ? config.secretAccessKey : ''\n  });\n\n  return new Bluebird((resolve, reject) => {\n    cloudWatchEvents.putRule(params, function (err, data) {\n      if (err) {\n        return reject(err);\n      }\n\n      return resolve(data);\n    });\n  });\n};\n\nlet _createCloudWatchTargetsFunction = function(config) {\n  let cloudWatchEvents = new AWS.CloudWatchEvents({\n    region: config.region,\n    accessKeyId: 'accessKeyId' in config ? config.accessKeyId : '',\n    secretAccessKey: 'secretAccessKey' in config ? config.secretAccessKey : ''\n  });\n\n  //targets[{Id, Arn, Input}] Input is the JSON text sent to target\n  return new Bluebird((resolve, reject) => {\n    cloudWatchEvents.putTargets(params, function (err, data) {\n      if (err) {\n        return reject(err);\n      }\n\n      return resolve(data);\n    });\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param logger\n * @param functionName\n * @returns {bluebird|exports|module.exports}\n * Resolved Object:\n * lambdaExists - boolean flag that is true if lambda exists\n * functionArn - this is a string that contains arn to the lambda function\n * @private\n */\nlet _getLambdaFunction = function (lambdaClient, logger, functionName) {\n  return new Bluebird((resolve, reject) => {\n    let getFunctionParams = {\n      FunctionName: functionName\n    };\n\n    lambdaClient.getFunction(getFunctionParams, function (err, data) {\n      if (err && err.statusCode !== 404) {\n        logger(`AWS API request failed. Check your AWS credentials and permissions. [Error: ${JSON.stringify(err)}]`);\n        reject(err);\n      }\n      else if (err && err.statusCode === 404) {\n        logger(`Lambda not found. [LambdaName: ${functionName}]`);\n        resolve({lambdaExists: false});\n      }\n      else {\n        logger(`Lambda found! [LambdaName: ${functionName}]`);\n        resolve({\n          lambdaExists: true,\n          functionArn: data.Configuration.FunctionArn\n        });\n      }\n    });\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param logger\n * @param codePackage\n * @param params\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nlet _createLambdaFunction = function (lambdaClient, logger, codePackage, params) {\n  return new Bluebird((resolve, reject) => {\n    logger(`Creating LambdaFunction. [FunctionName: ${params.FunctionName}]`);\n    let data = fs.readFileSync(codePackage);\n\n    params.Code = {ZipFile: data};\n    lambdaClient.createFunction(params, function (err, data) {\n      if (err) {\n        logger(`Create function failed. Check your iam:PassRole permissions. [Error: ${JSON.stringify(err)}]`);\n        reject(err);\n      } else {\n        logger(`Created Lambda successfully. [Data: ${JSON.stringify(data)}]`);\n        resolve({functionArn: data.FunctionArn});\n      }\n    });\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param logger\n * @param codePackage\n * @param params\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nlet _updateLambdaFunction = function (lambdaClient, logger, codePackage, params) {\n  return new Bluebird((resolve, reject) => {\n    logger(`Updating LambdaFunction. [FunctionName: ${params.FunctionName}]`);\n    let data = fs.readFileSync(codePackage);\n\n    let updateFunctionParams = {\n      FunctionName: params.FunctionName,\n      ZipFile: data,\n      Publish: false\n    };\n\n    lambdaClient.updateFunctionCode(updateFunctionParams, function (err, data) {\n      if (err) {\n        logger(`UpdateFunction Error: ${JSON.stringify(err)}`);\n        reject(err);\n      } else {\n        lambdaClient.updateFunctionConfiguration(params, function (err, data) {\n          if (err) {\n            logger(`UpdateFunctionConfiguration Error: ${JSON.stringify(err)}`);\n            reject(err);\n          } else {\n            logger(`Successfully updated lambda. [FunctionName: ${params.FunctionName}] [Data: ${JSON.stringify(data)}]`);\n            resolve();\n          }\n        });\n      }\n    });\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param config\n * @param logger\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nlet _updateEventSource = function (lambdaClient, config, logger) {\n  return new Bluebird((resolve, reject) => {\n    if (!config.eventSource) {\n      resolve();\n      return;\n    }\n\n    let localParams = extend({\n      FunctionName: config.functionName\n    }, config.eventSource);\n\n    let getEventSourceMappingsParams = {\n      FunctionName: localParams.FunctionName,\n      EventSourceArn: localParams.EventSourceArn\n    };\n\n    lambdaClient.listEventSourceMappings(getEventSourceMappingsParams, function (err, data) {\n      if (err) {\n        logger(\"List event source mapping failed, please make sure you have permission\");\n        reject(err);\n      } else if (data.EventSourceMappings.length === 0) {\n        lambdaClient.createEventSourceMapping(localParams, function (err, data) {\n          if (err) {\n            logger(`Failed to create event source mapping! Error: ${err}`);\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      } else {\n        async.eachSeries(data.EventSourceMappings, function (mapping, iteratorCallback) {\n\n          let updateEventSourceMappingParams = {\n            UUID: mapping.UUID,\n            BatchSize: localParams.BatchSize\n          };\n\n          lambdaClient.updateEventSourceMapping(updateEventSourceMappingParams, iteratorCallback);\n        }, function (err) {\n          if (err) {\n            logger(`Update event source mapping failed. ${err}`);\n            reject(err);\n          }\n          else {\n            resolve();\n          }\n        });\n      }\n    });\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param snsClient\n * @param config\n * @param logger\n * @param functionArn\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nlet _updatePushSource = function (lambdaClient, snsClient, config, logger, functionArn) {\n  if (!config.pushSource) {\n    return Bluebird.resolve(true);\n  }\n\n  return Bluebird.each(config.pushSource, (currentTopic, currentIndex, length) => {\n    logger(`Executing Topic ${currentIndex} of ${length}`);\n    logger(`Current Topic: ${JSON.stringify(currentTopic)}`);\n    let currentTopicNameArn = currentTopic.TopicArn;\n    let currentTopicStatementId = currentTopic.StatementId;\n    let topicName = currentTopic.TopicArn.split(':').pop();\n\n    return _createTopicIfNotExists(snsClient, topicName)\n      .then(() => _subscribeLambdaToTopic(lambdaClient, snsClient, logger, config, functionArn, topicName, currentTopicNameArn, currentTopicStatementId))\n      .catch((err) => {\n        logger(`Error: ${JSON.stringify(err)}`);\n        throw true;\n      });\n  });\n};\n\n/**\n *\n * @param snsClient\n * @param topicName\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nlet _createTopicIfNotExists = function (snsClient, topicName) {\n  return new Bluebird((resolve, reject) => {\n    var listTopicParams = {};\n\n    snsClient.listTopics(listTopicParams, function (err, data) {\n      if (err) {\n        logger(`Failed to list to topic. Error: ${JSON.stringify(err)}`);\n        reject(err);\n      }\n      else {\n        let foundTopic = __.find(data.Topics, (o) => o.TopicArn === topicName);\n        if (!__.isUndefined(foundTopic)) {\n          resolve();\n        } else {\n          let createParams = {\n            Name: topicName\n          };\n\n          snsClient.createTopic(createParams, function (err, data) {\n            if (err) {\n              logger(`Failed to create to topic. Error ${JSON.stringify(err)}`);\n              reject(err);\n            }\n            else {\n              resolve();\n            }\n          });\n        }\n      }\n    });\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param snsClient\n * @param logger\n * @param config\n * @param functionArn\n * @param topicName\n * @param currentTopicNameArn\n * @param currentTopicStatementId\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nlet _subscribeLambdaToTopic = function (lambdaClient, snsClient, logger, config, functionArn, topicName, currentTopicNameArn, currentTopicStatementId) {\n  return new Bluebird((resolve, reject) => {\n\n    let subParams = {\n      Protocol: 'lambda',\n      Endpoint: functionArn,\n      TopicArn: currentTopicNameArn\n    };\n\n    snsClient.subscribe(subParams, function (err, data) {\n      if (err) {\n        logger(`Failed to subscribe to topic. [Topic Name: ${topicName}] [TopicArn: ${subParams.TopicArn}] [Error: ${JSON.stringify(err)}]`);\n        reject(err);\n      }\n      else {\n        let removePermissionParams = {\n          FunctionName: config.functionName,\n          StatementId: currentTopicStatementId\n        };\n        lambdaClient.removePermission(removePermissionParams, function (err, data) {\n          if (err && err.StatusCode === 404) {\n            logger(`Permission does not exist. [Error: ${JSON.stringify(err)}]`);\n          }\n          else if (err && err.statusCode !== 404) {\n            logger(`Unable to delete permission. [Error: ${JSON.stringify(err)}]`);\n          }\n          else {\n            logger(`Permission deleted successfully! [Data: ${JSON.stringify(data)}]`);\n          }\n\n          let permissionParams = {\n            FunctionName: config.functionName,\n            Action: \"lambda:InvokeFunction\",\n            Principal: \"sns.amazonaws.com\",\n            StatementId: currentTopicStatementId,\n            SourceArn: currentTopicNameArn\n          };\n          lambdaClient.addPermission(permissionParams, function (err, data) {\n            if (err) {\n              logger(`Failed to add permission. [Error: ${JSON.stringify(err)}]`);\n              reject(err);\n            }\n            else {\n              logger(`Succeeded in adding permission. [Data: ${JSON.stringify(data)}]`);\n              resolve();\n            }\n          });\n        });\n      }\n    });\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param logger\n * @param config\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nlet _publishLambdaVersion = function (lambdaClient, logger, config) {\n  return _publishVersion(lambdaClient, logger, config)\n    .then(() => _listVersionsByFunction(lambdaClient, logger, config))\n    .then((listVersionsResult) => {\n\n      let versionsToDelete = [];\n      let last = listVersionsResult.Versions[listVersionsResult.Versions.length - 1].Version;\n      for (let index = 0; index < listVersionsResult.Versions.length; ++index) {\n        let version = listVersionsResult.Versions[index].Version;\n        if (version !== \"$LATEST\" && version !== last) {\n          versionsToDelete.push(_deleteLambdaFunctionVersion(lambdaClient, logger, config, version));\n        }\n      }\n\n      return Bluebird.all(versionsToDelete);\n\n    });\n};\n\n/**\n *\n * @param lambdaClient\n * @param logger\n * @param config\n * @returns {Promise}\n * @private\n */\nlet _publishVersion = function (lambdaClient, logger, config) {\n  return new Bluebird((resolve, reject) => {\n    let publishVersionParams = {FunctionName: config.functionName};\n\n    lambdaClient.publishVersion(publishVersionParams, function (err, data) {\n      if (err) {\n        logger(`Error Publishing Version. [Error: ${JSON.stringify(err)}]`);\n        reject(err);\n      } else {\n        logger(`Successfully published version. [Data: ${JSON.stringify(data)}]`);\n        resolve(data);\n      }\n    });\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param logger\n * @param config\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nlet _listVersionsByFunction = function (lambdaClient, logger, config) {\n  return new Bluebird((resolve, reject) => {\n    let listVersionsParams = {FunctionName: config.functionName};\n    lambdaClient.listVersionsByFunction(listVersionsParams, function (listErr, data) {\n      if (listErr) {\n        logger(`Error Listing Versions for Lambda Function. [Error: ${JSON.stringify(listErr)}]`);\n        reject(listErr);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param logger\n * @param config\n * @param version\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nlet _deleteLambdaFunctionVersion = function (lambdaClient, logger, config, version) {\n  return new Bluebird((resolve) => {\n\n    let deleteFunctionParams = {\n      FunctionName: config.functionName,\n      Qualifier: version\n    };\n\n    lambdaClient.deleteFunction(deleteFunctionParams, function (err, data) {\n      if (err) {\n        logger(`Failed to delete lambda version. [FunctionName: ${config.functionName}] [Version: ${version}]`);\n      }\n      else {\n        logger(`Successfully deleted lambda version. [FunctionName: ${config.functionName}] [Version: ${version}]`);\n      }\n      resolve();\n    });\n  });\n};\n\n/**\n *\n * @param lambdaClient\n * @param cloudWatchLogsClient\n * @param logger\n * @param config\n * @param params\n * @returns {*}\n * @private\n */\nlet _attachLogging = function (lambdaClient, cloudWatchLogsClient, logger, config, params) {\n  if (!config.logging) {\n    return Promise.resolve('no logging to attach');\n  }\n  return _addLoggingLambdaPermissionToLambda(lambdaClient, logger, config)\n    .then(() => _updateCloudWatchLogsSubscription(cloudWatchLogsClient, logger, config, params))\n    .catch(err => {\n      let parsedStatusCode = __.get(err, 'statusCode', '');\n      logger(`Error occurred in _attachLogging. [StatusCode: ${parsedStatusCode}]`);\n      if(parsedStatusCode !== 429 && err.statusCode !== '429') {\n        logger(`Recieved a non-retry throttle error`);\n        throw new retry.StopError(`Recieved non-retry throttle error.  [Error: ${JSON.stringify(err)}]`);\n      }\n    });\n};\n\n/**\n *\n * @param lambdaClient\n * @param logger\n * @param config\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nlet _addLoggingLambdaPermissionToLambda = function (lambdaClient, logger, config) {\n  return new Bluebird((resolve, reject) => {\n    // Need to add the permission once, but if it fails the second time no worries.\n    let permissionParams = {\n      Action: 'lambda:InvokeFunction',\n      FunctionName: config.logging.LambdaFunctionName,\n      Principal: config.logging.Principal,\n      StatementId: `${config.logging.LambdaFunctionName}LoggingId`\n    };\n    lambdaClient.addPermission(permissionParams, (err, data) => {\n      if (err) {\n        if (err.message.match(/The statement id \\(.*?\\) provided already exists. Please provide a new statement id, or remove the existing statement./i)) {\n          logger(`Lambda function already contains loggingIndex [Function: ${permissionParams.FunctionName}] [Permission StatementId: ${permissionParams.StatementId}]`);\n          resolve();\n        } else {\n          logger(`Error Adding Logging Permission to Lambda. [Error: ${JSON.stringify(err)}]`, err.stack);\n          reject(err);\n        }\n      }\n      else {\n        logger(data);\n        resolve();\n      }\n    });\n  });\n};\n\n/**\n *\n * @param cloudWatchLogsClient\n * @param logger\n * @param config\n * @param params\n * @returns {bluebird|exports|module.exports}\n * @private\n */\nlet _updateCloudWatchLogsSubscription = function (cloudWatchLogsClient, logger, config, params) {\n  return new Bluebird((resolve, reject) => {\n    let cloudWatchParams = {\n      destinationArn: config.logging.Arn, /* required */\n      filterName: `LambdaStream_${params.FunctionName}`,\n      filterPattern: '',\n      logGroupName: `/aws/lambda/${params.FunctionName}`\n    };\n    logger(`Function Name: ${params.FunctionName}`);\n    logger(`Filter Name: ${cloudWatchParams.filterName}`);\n    logger(`Log Group Name: ${cloudWatchParams.logGroupName}`);\n    cloudWatchLogsClient.putSubscriptionFilter(cloudWatchParams, (err, data) => {\n      if (err) {\n        if (err.message.match(/The specified log group does not exist./i)) {\n          //this error shouldn't stop the deploy since its due to the lambda having never been executed in order to create the log group in Cloud Watch Logs,\n          // so we are going to ignore this error\n          // ..we should recover from this by creating the log group or it will be resolved on next execution after the lambda has been run once\n          logger(`Failed to add subscription filter to lambda due it log group not existing.  [LogGroupName: ${cloudWatchParams.logGroupName}][FilterName: ${cloudWatchParams.filterName}]`);\n          resolve();\n        }\n        else {\n          logger(`Failed To Add Mapping For Logger. [Error: ${JSON.stringify(err)}]`);\n          reject(err);\n        }\n      }\n      else {\n        logger(`Successfully added subscription Filter. [LogGroupName: ${cloudWatchParams.logGroupName}][FilterName: ${cloudWatchParams.filterName}] [Response: ${JSON.stringify(data)}]`);\n        resolve();\n      }\n    });\n  });\n};"],"sourceRoot":"/source/"}